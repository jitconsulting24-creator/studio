
'use client';
import { useState } from 'react';
import type { Project, Module, ChangeRequestStatus, TimelineEvent } from '@/lib/definitions';
import ProjectHeader from './project-header';
import RequirementsCard from './requirements-card';
import ModulesAccordion from './modules-accordion';
import TimelineView from './timeline-view';
import ChangeRequestsList from './change-requests-list';
import { useToast } from '@/hooks/use-toast';

export default function ProjectDetailsClientPage({ initialProject }: { initialProject: Project }) {
  const [project, setProject] = useState(initialProject);
  const { toast } = useToast();

  const addTimelineEvent = (eventDescription: string, actor: TimelineEvent['actor']) => {
    const newEvent: TimelineEvent = {
        eventDescription,
        eventDate: new Date(),
        actor,
    };
    setProject(prev => ({ ...prev, timelineEvents: [newEvent, ...prev.timelineEvents] }));
  };

  const handleAddModule = (newModuleData: Omit<Module, 'id' | 'parts' | 'stages' | 'requirements' | 'reviews'>) => {
    const newModule: Module = {
        ...newModuleData,
        id: `mod-${Date.now()}`,
        status: 'Pendiente',
        parts: [],
        stages: [],
        requirements: [],
        reviews: [],
    };
    setProject(prev => ({ ...prev, modules: [...prev.modules, newModule] }));
    addTimelineEvent(`New module added: "${newModule.name}"`, 'admin');
     toast({
      title: 'Module Added',
      description: `The module "${newModule.name}" has been added to the project.`,
    });
  };

  const handleAddModulesFromAI = (newModules: Omit<Module, 'id' | 'parts' | 'stages' | 'requirements' | 'reviews'>[]) => {
      const modulesToAdd: Module[] = newModules.map(m => ({
          ...m,
          id: `mod-${Date.now()}-${Math.random()}`,
          status: 'Pendiente',
          parts: [],
          stages: [],
          requirements: [],
          reviews: [],
      }));

      setProject(prev => ({...prev, modules: [...prev.modules, ...modulesToAdd]}));
      addTimelineEvent(`${modulesToAdd.length} modules generated by AI`, 'sistema');
      toast({
        title: 'AI Modules Added',
        description: `${modulesToAdd.length} new modules have been added to the project.`,
      });
  }

  const handleDeleteModule = (moduleId: string) => {
    const moduleName = project.modules.find(m => m.id === moduleId)?.name || 'Unknown';
    setProject(prev => ({
        ...prev,
        modules: prev.modules.filter(m => m.id !== moduleId)
    }));
    addTimelineEvent(`Module deleted: "${moduleName}"`, 'admin');
    toast({
        variant: 'destructive',
        title: 'Module Deleted',
        description: `The module "${moduleName}" has been deleted.`,
    });
  }

  const handleChangeRequestStatus = (requestId: string, status: ChangeRequestStatus) => {
    setProject(prev => ({
      ...prev,
      changeRequests: prev.changeRequests.map(req => 
        req.id === requestId ? { ...req, status } : req
      )
    }));
    addTimelineEvent(`Change request ${requestId} has been ${status.toLowerCase()}`, 'admin');
    toast({
        title: `Request ${status}`,
        description: `The change request has been marked as ${status.toLowerCase()}.`
    });
  };


  return (
    <div className="space-y-8">
      <ProjectHeader project={project} />
      
      <div className="grid gap-8 lg:grid-cols-3 lg:items-start">
        <div className="lg:col-span-2 space-y-8">
          <ModulesAccordion 
            modules={project.modules} 
            onAddModule={handleAddModule}
            onDeleteModule={handleDeleteModule}
           />
          <TimelineView events={project.timelineEvents} />
        </div>

        <div className="space-y-8">
          <RequirementsCard 
            requirements={project.initialRequirements} 
            onAddModules={handleAddModulesFromAI}
            projectDescription={project.description}
          />
          <ChangeRequestsList 
            requests={project.changeRequests} 
            onChangeRequestStatus={handleChangeRequestStatus}
          />
        </div>
      </div>
    </div>
  );
}
